// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	model "MedApp/internal/model"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockAuthorization) CreateClient(client model.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockAuthorizationMockRecorder) CreateClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockAuthorization)(nil).CreateClient), client)
}

// CreateDoctor mocks base method.
func (m *MockAuthorization) CreateDoctor(doctor model.Doctor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctor", doctor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoctor indicates an expected call of CreateDoctor.
func (mr *MockAuthorizationMockRecorder) CreateDoctor(doctor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctor", reflect.TypeOf((*MockAuthorization)(nil).CreateDoctor), doctor)
}

// LoginClient mocks base method.
func (m *MockAuthorization) LoginClient(input model.ClientInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClient", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockAuthorizationMockRecorder) LoginClient(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockAuthorization)(nil).LoginClient), input)
}

// LoginDoctor mocks base method.
func (m *MockAuthorization) LoginDoctor(input model.DoctorInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginDoctor", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginDoctor indicates an expected call of LoginDoctor.
func (mr *MockAuthorizationMockRecorder) LoginDoctor(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginDoctor", reflect.TypeOf((*MockAuthorization)(nil).LoginDoctor), input)
}

// MockProfile is a mock of Profile interface.
type MockProfile struct {
	ctrl     *gomock.Controller
	recorder *MockProfileMockRecorder
}

// MockProfileMockRecorder is the mock recorder for MockProfile.
type MockProfileMockRecorder struct {
	mock *MockProfile
}

// NewMockProfile creates a new mock instance.
func NewMockProfile(ctrl *gomock.Controller) *MockProfile {
	mock := &MockProfile{ctrl: ctrl}
	mock.recorder = &MockProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfile) EXPECT() *MockProfileMockRecorder {
	return m.recorder
}

// FindClientByID mocks base method.
func (m *MockProfile) FindClientByID(id string) (*model.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClientByID", id)
	ret0, _ := ret[0].(*model.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClientByID indicates an expected call of FindClientByID.
func (mr *MockProfileMockRecorder) FindClientByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClientByID", reflect.TypeOf((*MockProfile)(nil).FindClientByID), id)
}

// FindDoctorByID mocks base method.
func (m *MockProfile) FindDoctorByID(id string) (*model.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDoctorByID", id)
	ret0, _ := ret[0].(*model.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDoctorByID indicates an expected call of FindDoctorByID.
func (mr *MockProfileMockRecorder) FindDoctorByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDoctorByID", reflect.TypeOf((*MockProfile)(nil).FindDoctorByID), id)
}

// MockDoctor is a mock of Doctor interface.
type MockDoctor struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorMockRecorder
}

// MockDoctorMockRecorder is the mock recorder for MockDoctor.
type MockDoctorMockRecorder struct {
	mock *MockDoctor
}

// NewMockDoctor creates a new mock instance.
func NewMockDoctor(ctrl *gomock.Controller) *MockDoctor {
	mock := &MockDoctor{ctrl: ctrl}
	mock.recorder = &MockDoctorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctor) EXPECT() *MockDoctorMockRecorder {
	return m.recorder
}

// GetAllDoctors mocks base method.
func (m *MockDoctor) GetAllDoctors() ([]model.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDoctors")
	ret0, _ := ret[0].([]model.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDoctors indicates an expected call of GetAllDoctors.
func (mr *MockDoctorMockRecorder) GetAllDoctors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDoctors", reflect.TypeOf((*MockDoctor)(nil).GetAllDoctors))
}

// GetDoctorFreeSlots mocks base method.
func (m *MockDoctor) GetDoctorFreeSlots(id, date string) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorFreeSlots", id, date)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDoctorFreeSlots indicates an expected call of GetDoctorFreeSlots.
func (mr *MockDoctorMockRecorder) GetDoctorFreeSlots(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorFreeSlots", reflect.TypeOf((*MockDoctor)(nil).GetDoctorFreeSlots), id, date)
}

// MockBooking is a mock of Booking interface.
type MockBooking struct {
	ctrl     *gomock.Controller
	recorder *MockBookingMockRecorder
}

// MockBookingMockRecorder is the mock recorder for MockBooking.
type MockBookingMockRecorder struct {
	mock *MockBooking
}

// NewMockBooking creates a new mock instance.
func NewMockBooking(ctrl *gomock.Controller) *MockBooking {
	mock := &MockBooking{ctrl: ctrl}
	mock.recorder = &MockBookingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooking) EXPECT() *MockBookingMockRecorder {
	return m.recorder
}

// BookSession mocks base method.
func (m *MockBooking) BookSession(booking model.BookingModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookSession", booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookSession indicates an expected call of BookSession.
func (mr *MockBookingMockRecorder) BookSession(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookSession", reflect.TypeOf((*MockBooking)(nil).BookSession), booking)
}

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// GetCatFact mocks base method.
func (m *MockContent) GetCatFact(id string) (*model.CatFact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatFact", id)
	ret0, _ := ret[0].(*model.CatFact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatFact indicates an expected call of GetCatFact.
func (mr *MockContentMockRecorder) GetCatFact(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatFact", reflect.TypeOf((*MockContent)(nil).GetCatFact), id)
}

// GetCatFacts mocks base method.
func (m *MockContent) GetCatFacts() ([]bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatFacts")
	ret0, _ := ret[0].([]bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatFacts indicates an expected call of GetCatFacts.
func (mr *MockContentMockRecorder) GetCatFacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatFacts", reflect.TypeOf((*MockContent)(nil).GetCatFacts))
}

// SaveCatFacts mocks base method.
func (m *MockContent) SaveCatFacts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCatFacts")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCatFacts indicates an expected call of SaveCatFacts.
func (mr *MockContentMockRecorder) SaveCatFacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCatFacts", reflect.TypeOf((*MockContent)(nil).SaveCatFacts))
}

// MockMedicine is a mock of Medicine interface.
type MockMedicine struct {
	ctrl     *gomock.Controller
	recorder *MockMedicineMockRecorder
}

// MockMedicineMockRecorder is the mock recorder for MockMedicine.
type MockMedicineMockRecorder struct {
	mock *MockMedicine
}

// NewMockMedicine creates a new mock instance.
func NewMockMedicine(ctrl *gomock.Controller) *MockMedicine {
	mock := &MockMedicine{ctrl: ctrl}
	mock.recorder = &MockMedicineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMedicine) EXPECT() *MockMedicineMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMedicine) Create(ctx context.Context, medicine *model.Medicine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, medicine)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMedicineMockRecorder) Create(ctx, medicine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMedicine)(nil).Create), ctx, medicine)
}

// GetByID mocks base method.
func (m *MockMedicine) GetByID(ctx context.Context, id string) (*model.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMedicineMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMedicine)(nil).GetByID), ctx, id)
}

// GetAll mocks base method.
func (m *MockMedicine) GetAll(ctx context.Context) ([]*model.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMedicineMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMedicine)(nil).GetAll), ctx)
}

// Delete mocks base method.
func (m *MockMedicine) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMedicineMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMedicine)(nil).Delete), ctx, id)
}

// MockAllServices is a mock of AllServices interface.
type MockAllServices struct {
	ctrl     *gomock.Controller
	recorder *MockAllServicesMockRecorder
}

// MockAllServicesMockRecorder is the mock recorder for MockAllServices.
type MockAllServicesMockRecorder struct {
	mock *MockAllServices
}

// NewMockAllServices creates a new mock instance.
func NewMockAllServices(ctrl *gomock.Controller) *MockAllServices {
	mock := &MockAllServices{ctrl: ctrl}
	mock.recorder = &MockAllServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllServices) EXPECT() *MockAllServicesMockRecorder {
	return m.recorder
}

// BookSession mocks base method.
func (m *MockAllServices) BookSession(booking model.BookingModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookSession", booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookSession indicates an expected call of BookSession.
func (mr *MockAllServicesMockRecorder) BookSession(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookSession", reflect.TypeOf((*MockAllServices)(nil).BookSession), booking)
}

// CreateClient mocks base method.
func (m *MockAllServices) CreateClient(client model.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockAllServicesMockRecorder) CreateClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockAllServices)(nil).CreateClient), client)
}

// CreateDoctor mocks base method.
func (m *MockAllServices) CreateDoctor(doctor model.Doctor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDoctor", doctor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDoctor indicates an expected call of CreateDoctor.
func (mr *MockAllServicesMockRecorder) CreateDoctor(doctor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDoctor", reflect.TypeOf((*MockAllServices)(nil).CreateDoctor), doctor)
}

// FindClientByID mocks base method.
func (m *MockAllServices) FindClientByID(id string) (*model.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClientByID", id)
	ret0, _ := ret[0].(*model.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClientByID indicates an expected call of FindClientByID.
func (mr *MockAllServicesMockRecorder) FindClientByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClientByID", reflect.TypeOf((*MockAllServices)(nil).FindClientByID), id)
}

// FindDoctorByID mocks base method.
func (m *MockAllServices) FindDoctorByID(id string) (*model.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDoctorByID", id)
	ret0, _ := ret[0].(*model.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDoctorByID indicates an expected call of FindDoctorByID.
func (mr *MockAllServicesMockRecorder) FindDoctorByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDoctorByID", reflect.TypeOf((*MockAllServices)(nil).FindDoctorByID), id)
}

// GetAllDoctors mocks base method.
func (m *MockAllServices) GetAllDoctors() ([]model.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDoctors")
	ret0, _ := ret[0].([]model.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDoctors indicates an expected call of GetAllDoctors.
func (mr *MockAllServicesMockRecorder) GetAllDoctors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDoctors", reflect.TypeOf((*MockAllServices)(nil).GetAllDoctors))
}

// GetCatFact mocks base method.
func (m *MockAllServices) GetCatFact(id string) (*model.CatFact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatFact", id)
	ret0, _ := ret[0].(*model.CatFact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatFact indicates an expected call of GetCatFact.
func (mr *MockAllServicesMockRecorder) GetCatFact(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatFact", reflect.TypeOf((*MockAllServices)(nil).GetCatFact), id)
}

// GetCatFacts mocks base method.
func (m *MockAllServices) GetCatFacts() ([]bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatFacts")
	ret0, _ := ret[0].([]bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatFacts indicates an expected call of GetCatFacts.
func (mr *MockAllServicesMockRecorder) GetCatFacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatFacts", reflect.TypeOf((*MockAllServices)(nil).GetCatFacts))
}

// GetDoctorFreeSlots mocks base method.
func (m *MockAllServices) GetDoctorFreeSlots(id, date string) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorFreeSlots", id, date)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDoctorFreeSlots indicates an expected call of GetDoctorFreeSlots.
func (mr *MockAllServicesMockRecorder) GetDoctorFreeSlots(id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorFreeSlots", reflect.TypeOf((*MockAllServices)(nil).GetDoctorFreeSlots), id, date)
}

// LoginClient mocks base method.
func (m *MockAllServices) LoginClient(input model.ClientInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClient", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockAllServicesMockRecorder) LoginClient(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockAllServices)(nil).LoginClient), input)
}

// LoginDoctor mocks base method.
func (m *MockAllServices) LoginDoctor(input model.DoctorInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginDoctor", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginDoctor indicates an expected call of LoginDoctor.
func (mr *MockAllServicesMockRecorder) LoginDoctor(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginDoctor", reflect.TypeOf((*MockAllServices)(nil).LoginDoctor), input)
}

// SaveCatFacts mocks base method.
func (m *MockAllServices) SaveCatFacts() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCatFacts")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCatFacts indicates an expected call of SaveCatFacts.
func (mr *MockAllServicesMockRecorder) SaveCatFacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCatFacts", reflect.TypeOf((*MockAllServices)(nil).SaveCatFacts))
}

// Create mocks base method.
func (m *MockAllServices) Create(ctx context.Context, medicine *model.Medicine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, medicine)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAllServicesMockRecorder) Create(ctx, medicine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAllServices)(nil).Create), ctx, medicine)
}

// GetByID mocks base method.
func (m *MockAllServices) GetByID(ctx context.Context, id string) (*model.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAllServicesMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAllServices)(nil).GetByID), ctx, id)
}

// GetAll mocks base method.
func (m *MockAllServices) GetAll(ctx context.Context) ([]*model.Medicine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Medicine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAllServicesMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAllServices)(nil).GetAll), ctx)
}

// Delete mocks base method.
func (m *MockAllServices) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAllServicesMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAllServices)(nil).Delete), ctx, id)
}